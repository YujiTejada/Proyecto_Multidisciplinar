public void printTree(String path) {
        try {
            for (FTPFile ftpFile : this.ftpClient.listFiles(path)) {
                System.out.printf("[printTree][%d] Get name : %s \n", System.currentTimeMillis(), ftpFile.getName());
                System.out.printf("[printTree][%d] Get timestamp : %s \n", System.currentTimeMillis(), ftpFile.getTimestamp().getTimeInMillis());
                System.out.printf("[printTree][%d] Get group : %s \n", System.currentTimeMillis(), ftpFile.getGroup());
                System.out.printf("[printTree][%d] Get link : %s \n", System.currentTimeMillis(), ftpFile.getLink());
                System.out.printf("[printTree][%d] Get user : %s \n", System.currentTimeMillis(), ftpFile.getUser());
                System.out.printf("[printTree][%d] Get type : %s \n", System.currentTimeMillis(), ftpFile.getType());
                System.out.printf("[printTree][%d] Is file : %s \n", System.currentTimeMillis(), ftpFile.isFile());
                System.out.printf("[printTree][%d] Is directory : %s \n", System.currentTimeMillis(), ftpFile.isDirectory());
                System.out.printf("[printTree][%d] Formatted string : %s \n", System.currentTimeMillis(), ftpFile.toFormattedString());
                if (ftpFile.isDirectory()) {
                    printTree(path + File.separator + ftpFile.getName());
                }
            }
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    private String checkIfFileExists(String recursivePath, String fileName) {
            try {
                for (FTPFile ftpFile : ftpClient.listFiles(recursivePath)) {
                    if (ftpFile.isDirectory()) {
                        String pathFound = checkIfFileExists(recursivePath + "/" + ftpFile.getName(), fileName);
                        if (pathFound != null) {
                            return pathFound;
                        }
                    } else {
                        if (ftpFile.getName().equals(fileName)) {
                            return recursivePath + "/" + ftpFile.getName();
                        }
                    }
                }
                return null;
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }

        /**
         *
         * @param rutaArchivo - String - La ruta introducida por el usuario para la búsqueda de "nba.xml".
         * Método que permite validar si una ruta de archivo es válida. Para ello, ejecuta el método exists(), que
         * comprueba si un archivo existe (devolviendo "true" en dicho caso):
         * 1. Si existe, es una ruta válida.
         * 2. Si no existe, intenta crearlo. Si lo puede crear, es que tiene una ruta válida. Si la ruta no es válida,
         * se lanza IOException, y se devuelve "false".
         * Finalmente, si el archivo ha sido creado, es borrado.
         * @return
         * <u>
         * <li>true - Si es una ruta válida</li>
         * <li>false - Si no es una ruta válida</li>
         * </u>
         */
        private boolean validarRuta(String rutaArchivo) {
            File archivoTemp = new File(rutaArchivo);
            boolean archivoCreado = false;
            if (!archivoTemp.exists()) {
                try {
                    archivoCreado = archivoTemp.createNewFile();
                    return archivoCreado;
                } catch (IOException e) {
                    System.out.println("No es una ruta de archivo válida");
                } finally {
                    if (archivoCreado) {
                        archivoTemp.delete();
                    }
                }
            } else {
                return true;
            }
            return false;
        }

        /**
         *
         * @param rutaArchivoValida - String - La ruta de archivo introducida por el usuario para la búsqueda de "nba.xml",
         * ya comprobada como ruta válida.
         * Método que permite comprobar si la ruta validada del archivo introducido por el usuario existe.
         * @return
         * <u>
         *     <li>1 - Existe el archivo y es directorio</li>
         *     <Li>2 - Existe el archivo y es "nba.xml"</Li>
         *     <li>0 - Existe el archivo pero no es ninguno de los anteriores, por lo que se considera no válido</li>
         *     <li>3 - No existe el archivo introducido</li>
         * </u>
         */
        public int comprobarArchivoRuta(String rutaArchivoValida) {
            File fileTemp = new File(rutaArchivoValida);
            if (fileTemp.exists()) {
                if (fileTemp.isDirectory()) {
                    return 1;
                } else if (fileTemp.getName().equals("nba.xml")){
                    return 2;
                } else {
                    return 0; // Archivo random
                }
            } else {
                return 3;
            }
        }


        if (!newDirectory.exists()) {
                    if (newDirectory.mkdirs()) {
                        return ResponseEntity.ok()
                                .contentType(MediaType.TEXT_PLAIN)
                                .body("folder_created_succesfully");
                    } else {
                        return ResponseEntity.ok()
                                .contentType(MediaType.TEXT_PLAIN)
                                .body("error_creating_folder");
                    }
                } else {
                    return ResponseEntity.ok()
                            .contentType(MediaType.TEXT_PLAIN)
                            .body("folder_already_exists");
                }

                boolean directoryExists = false;
                            for (FTPFile ftpFile : ftpClient.listFiles(createDirectoryRequest.getParentDirectoryPath())) {
                                if (ftpFile.isDirectory() && ftpFile.getName().equals(createDirectoryRequest.getDirectoryName())) {
                                    directoryExists = true;
                                }
                            }

@Bean
	public FTPClient ftpClient() {
		FTPClient ftpClient = new FTPClient();
		try {
			ftpClient.connect(FtpConstants.HOST, FtpConstants.PORT);
			ftpClient.login(FtpConstants.USERNAME, FtpConstants.PASSWORD);
			ftpClient.enterLocalPassiveMode();
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		return ftpClient;
	}